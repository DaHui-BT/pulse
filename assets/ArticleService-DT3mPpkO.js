var d=Object.defineProperty;var l=(c,s,e)=>s in c?d(c,s,{enumerable:!0,configurable:!0,writable:!0,value:e}):c[s]=e;var n=(c,s,e)=>l(c,typeof s!="symbol"?s+"":s,e);import{R as i}from"./request-CsgQfykI.js";const t=class t{constructor(){n(this,"request");this.request=new i}static getInstance(){return t.instance||(t.instance=new t),t.instance}async findTagById(s){try{const e=await this.request.get(`/tag/${s}`);return e.code==200?{success:!0,data:e.data}:{success:!1,error:e.message}}catch(e){return{success:!1,error:e.message}}}async findTagByIds(s){try{const e=await this.request.get("/tag-ids",{params:{ids:s}});return e.code==200?{success:!0,data:e.data}:{success:!1,error:e.message}}catch(e){return{success:!1,error:e.message}}}async findAllTags(){try{const s=await this.request.get("/tag");return s.code==200?{success:!0,data:s.data}:{success:!1,error:s.message}}catch(s){return{success:!1,error:s.message}}}async findTags(s={}){try{const e=await this.request.get("/tag",{params:s});return e.code==200?{success:!0,data:{tags:e.data,total:1}}:{success:!1,error:e.message}}catch(e){return{success:!1,error:e.message}}}async createTag(s){try{const e=await this.request.post("/tag",{data:s});return e.code==200?{success:!1,data:e.data}:{success:!1,error:e.message}}catch(e){return{success:!1,error:e.message}}}async updateTag(s,e){try{const r=await this.request.put(`/tag/${s}`,{data:e});return r.code==200?{success:!0,data:r.data}:{success:!1,error:r.message}}catch(r){return{success:!1,error:r.message}}}async deleteById(s){try{const e=await this.request.delete(`/tag/${s}`);return e.code==200?{success:!0}:{success:!1,error:e.message}}catch(e){return{success:!1,error:e.message}}}};n(t,"instance");let u=t;const a=class a{constructor(){n(this,"request");this.request=new i}static getInstance(){return a.instance||(a.instance=new a),a.instance}async findArticleById(s){try{const e=await this.request.get(`/article/${s}`);return e.code==200?{success:!0,data:e.data}:{success:!1,error:e.message}}catch(e){return{success:!1,error:e.message}}}async findArticles(s={},e={page:0,pageSize:10}){try{const r=await this.request.get("/article",{params:s});return r.code==200?{success:!0,data:{articles:r.data,total:1}}:{success:!1,error:r.message}}catch(r){return{success:!1,error:r.message}}}async createArticle(s){try{const e=await this.request.post("/article",{data:s});return e.code==200?{success:!0,data:e.data}:{success:!1,error:e.message}}catch(e){return{success:!1,error:e.message}}}async updateArticle(s,e){try{const r=await this.request.put(`/article/${s}`,{data:e});return r.code==200?{success:!0,data:r.data}:{success:!1,error:r.message}}catch(r){return{success:!1,error:r.message}}}async deleteById(s){try{const e=await this.request.delete(`/article/${s}`);return e.code==200?{success:!0,data:e.data}:{success:!1,error:e.message}}catch(e){return{success:!1,error:e.message}}}};n(a,"instance");let o=a;export{o as A,u as T};
