var n=Object.defineProperty;var o=(t,s,e)=>s in t?n(t,s,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[s]=e;var c=(t,s,e)=>o(t,typeof s!="symbol"?s+"":s,e);import{R as i}from"./request-CnqHcAYJ.js";const r=class r{constructor(){c(this,"request");this.request=new i}static getInstance(){return r.instance||(r.instance=new r),r.instance}async findTagById(s){try{const e=await this.request.get(`/tag/${s}`);return e.code==200?{success:!0,data:e.data}:{success:!1,error:e.message}}catch(e){return{success:!1,error:e.message}}}async findTagByIds(s){try{const e=await this.request.get("/tag-ids",{params:{ids:s}});return e.code==200?{success:!0,data:e.data}:{success:!1,error:e.message}}catch(e){return{success:!1,error:e.message}}}async findAllTags(){try{const s=await this.request.get("/tag");return s.code==200?{success:!0,data:s.data}:{success:!1,error:s.message}}catch(s){return{success:!1,error:s.message}}}async findTags(s={}){try{const e=await this.request.get("/tag",{params:s});return e.code==200?{success:!0,data:{tags:e.data,total:1}}:{success:!1,error:e.message}}catch(e){return{success:!1,error:e.message}}}async createTag(s){try{const e=await this.request.post("/tag",{data:s});return e.code==200?{success:!1,data:e.data}:{success:!1,error:e.message}}catch(e){return{success:!1,error:e.message}}}async updateTag(s,e){try{const a=await this.request.put(`/tag/${s}`,{data:e});return a.code==200?{success:!0,data:a.data}:{success:!1,error:a.message}}catch(a){return{success:!1,error:a.message}}}async deleteById(s){try{const e=await this.request.delete(`/tag/${s}`);return e.code==200?{success:!0}:{success:!1,error:e.message}}catch(e){return{success:!1,error:e.message}}}};c(r,"instance");let u=r;export{u as T};
