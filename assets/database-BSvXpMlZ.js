var m=Object.defineProperty;var y=(h,e,s)=>e in h?m(h,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):h[e]=s;var c=(h,e,s)=>y(h,typeof e!="symbol"?e+"":e,s);import{cs as p,ct as g,as as n,cu as b}from"./index-Df9vkjUl.js";import{L as i,c as P,f as E}from"./loading-DbInbvEp.js";class A extends p{}const l=class l{constructor(e=null){c(this,"options",{app_id:"pulse-application-tpfmdtx",cluster:"mongodb-atlas",database:"pulse-database",collection:null});c(this,"app",null);c(this,"user",null);c(this,"database",null);c(this,"isLogin",!1);e!=null&&e.app_id&&(this.options.app_id=e.app_id),e!=null&&e.cluster&&(this.options.cluster=e.cluster),e!=null&&e.database&&(this.options.database=e.database),e!=null&&e.collection&&(this.options.collection=e.collection),this.app=new g({id:this.options.app_id}),this.user=this.app.currentUser,this.user&&(this.isLogin=this.user.isLoggedIn,this.database=this.user.mongoClient(this.options.cluster).db(this.options.database)),this.database||n.error("Have not login, login first")}static getInstance(e=null){return l.instance||(l.instance=new l(e)),l.instance}getUser(){if(!this.user)throw n.warning("Have not login, login first"),new Error("Have not login, login first");return this.user}async connect(e,s,a=null){const t=b.emailPassword(e,s);try{if(!this.app)throw new Error("System error, try later");if(i.show(),this.user=await this.app.logIn(t,!1),this.user){this.isLogin=!0;let r=this.options.database;a&&(r=a),this.database=this.user.mongoClient(this.options.cluster).db(r),n.success("Login successful!")}}catch(r){throw r.errorCode=="InvalidPassword"?n.error("Authorization error, please check your email and password correct"):r.errorCode=="AuthError"?n.error(r.errorCode+": Confirm your account in your email inbox"):n.error(r.errorCode),new Error("Authentication failed")}finally{i.hide()}}async register(e,s){var a;try{i.show(),await((a=this.app)==null?void 0:a.emailPasswordAuth.registerUser({email:e,password:s})),n.success("Register successful!")}catch(t){throw n.error(t.error),new Error("Register Error: "+t.error)}finally{i.hide()}}async confirmUser(e,s){var a;try{i.show(),await((a=this.app)==null?void 0:a.emailPasswordAuth.confirmUser({token:e,tokenId:s})),n.success("Confirm successful!")}catch(t){throw n.error(t.error),new Error("Confirm Error: "+t.error)}finally{i.hide()}}async resendConfirmationEmail(e){var s;try{i.show(),await((s=this.app)==null?void 0:s.emailPasswordAuth.resendConfirmationEmail({email:e})),n.success("Resend Confirm successful!")}catch(a){throw n.error(a.error),new Error("Resend Confirm Error: "+a.error)}finally{i.hide()}}async sendResetPasswordEmail(e){var s;try{i.show(),await((s=this.app)==null?void 0:s.emailPasswordAuth.sendResetPasswordEmail({email:e})),n.success("Resend Reset Password successful!")}catch(a){throw n.error(a.error),new Error("Resend Reset Password Error: "+a.error)}finally{i.hide()}}async count(e,s={}){if(!this.database)throw new Error("Database not initialized");return new Promise((a,t)=>{i.show(),this.database.collection(e).count(s).then(r=>{a(r)}).catch(r=>{n.error(r.error),t(r)}).finally(()=>{i.hide()})})}async findAll(e){return new Promise((s,a)=>{i.show(),this.database.collection(e).find().then(t=>{s(t)}).catch(t=>{console.log(t),a(t),n.error(t.error)}).finally(()=>{i.hide()})})}async findList(e,s={},a={page:0,page_size:10}){return new Promise((t,r)=>{i.show(),this.database.collection(e).aggregate([{$match:s},{$skip:a.page},{$limit:a.page_size}]).then(o=>{t(o)}).catch(o=>{console.log(o),r(o),n.error(o.error)}).finally(()=>{i.hide()})})}async findOne(e,s={}){return new Promise((a,t)=>{i.show(),this.database.collection(e).findOne(s).then(r=>{a(r)}).catch(r=>{n.error(r.error),t(r)}).finally(()=>{i.hide()})})}async addOne(e,s={}){return new Promise((a,t)=>{i.show(),this.database.collection(e).insertOne(s).then(r=>{a(r)}).catch(r=>{n.error(r.error),t(r)}).finally(()=>{i.hide()})})}async updateOne(e,s={},a){return new Promise((t,r)=>{i.show(),this.database.collection(e).updateOne(s,{$set:a}).then(o=>{o.modifiedCount==1?n.success("update success"):n.error("Update Error, target not found"),t(o)}).catch(o=>{n.error(o.error),r(o)}).finally(()=>{i.hide()})})}async deleteOne(e,s={}){return new Promise((a,t)=>{i.show(),this.database.collection(e).deleteOne(s).then(r=>{a(r)}).catch(r=>{n.error(r.error),t(r)}).finally(()=>{i.hide()})})}async addMany(e,s){return new Promise((a,t)=>{i.show(),this.database.collection(e).insertMany(s).then(r=>{a(r)}).catch(r=>{n.error(r.error),t(r)}).finally(()=>{i.hide()})})}async updateMany(e,s={},a){return new Promise((t,r)=>{i.show(),this.database.collection(e).updateMany(s,{$set:a}).then(o=>{t(o)}).catch(o=>{n.error(o.error),r(o)}).finally(()=>{i.hide()})})}async deleteMany(e,s={}){return new Promise((a,t)=>{i.show(),this.database.collection(e).deleteMany(s).then(r=>{a(r)}).catch(r=>{n.error(r.error),t(r)}).finally(()=>{i.hide()})})}async uploadFile(e,s,a){i.show();try{const t=await P(s);if(t==null)throw Error("compress image error");const r=await E(t),o={filename:s.name,type:s.type,size:s.size,uploadDate:new Date,...a,data:r};return new Promise((w,f)=>{this.database.collection(e).insertOne(o).then(d=>{w(d)}).catch(d=>{n.error(d.error),f(d)})})}catch(t){console.log(t),n.error(t.message)}finally{i.hide()}}async deleteFile(e,s){return new Promise((a,t)=>{i.show(),this.database.collection(e).deleteOne({_id:s}).then(r=>{a(r)}).catch(r=>{n.error(r.error),t(r)}).finally(()=>{i.hide()})})}};c(l,"instance");let u=l;export{u as D,A as O};
